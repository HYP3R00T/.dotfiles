{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This repository is a complete solution for managing system configurations (dotfiles) and automating system setup with Ansible.</p> <p>I created this project to:  </p> <ul> <li>Streamline the process of configuring new systems.</li> <li>Automate repetitive tasks, like installing packages and applying settings.</li> <li>Make it easy to maintain a consistent environment across multiple devices.</li> </ul> <p>Whether you're a beginner or experienced, this project will help you understand the power of dotfiles and automation tools like Ansible.</p>"},{"location":"#whats-in-this-repository","title":"What\u2019s in This Repository?","text":"<ul> <li> <p>My Dotfiles Setup:   Explore the configuration files I use for tools like Bash, Zsh, Vim, and more. These are managed using Ansible for easy setup on new machines.</p> </li> <li> <p>Documentation Site:   This site (hosted via GitHub Pages) serves as a guide to help anyone:  </p> </li> <li>Understand how I built this system.</li> <li> <p>Learn how to create their own dotfiles setup.</p> </li> <li> <p>Scripts and Playbooks:   Ready-to-use scripts and Ansible playbooks for automated installation and configuration.</p> </li> </ul>"},{"location":"#how-this-works","title":"How This Works","text":"<ol> <li> <p>Dotfiles Repository:    My dotfiles are stored in this repo and organized into logical sections.</p> </li> <li> <p>Ansible for Automation:    Ansible playbooks handle tasks like installing packages, setting up configurations, and applying custom settings.</p> </li> <li> <p>Installation Script:    A single script (<code>install.sh</code>) applies the configurations automatically on any system.</p> </li> </ol>"},{"location":"#learn-to-build-your-own","title":"Learn to Build Your Own","text":"<p>\ud83d\udca1 Want to create your own dotfiles system? </p> <p>This repository includes a dedicated learning section where I teach you everything you need to know to:  </p> <ul> <li>Set up your own dotfiles repository.</li> <li>Use Ansible to automate system configurations.</li> <li>Customize the setup for your unique needs.</li> </ul>"},{"location":"learn/","title":"Learn","text":"<p>Welcome to the Ansible learning path! This guide will take you through the essential steps to set up and use Ansible for automating your dotfiles and system configurations. Whether you're a beginner or looking to refine your skills, this structured approach will help you create a streamlined and customizable automation setup.</p>"},{"location":"learn/#why-learn-ansible-for-dotfiles","title":"Why Learn Ansible for Dotfiles?","text":"<p>Ansible is a powerful tool for automating configuration management. By mastering it, you'll:</p> <ul> <li>Automate the setup of your dotfiles across multiple systems.</li> <li>Save time on repetitive configuration tasks.</li> <li>Ensure consistency in your environment, no matter where you work.</li> </ul> <p>If you're new to YAML or scripting, we recommend brushing up on the basics:</p> <ul> <li>Learn X in Y minutes: Where X=YAML</li> <li>Learn X in Y minutes: Where X=Bash</li> </ul> <p>But don\u2019t worry\u2014this guide assumes no prior Ansible experience.</p>"},{"location":"learn/#learning-path-overview","title":"Learning Path Overview","text":"<ul> <li>Laying the Groundwork</li> <li>The Config Whisperer</li> <li>Mapping the Inventory</li> </ul>"},{"location":"learn/laying-the-groundwork/","title":"Laying the Groundwork","text":"<p>Failure is simply the opportunity to begin again, this time more intelligently. \u2013 Henry Ford</p> <p>As it's inevitable to mess up your system, it's better to start working on a disposable machine. Following are some of the options, set up whichever you are comfortable with.</p> <ul> <li>Virtual Machine</li> <li>WSL2</li> <li>Docker</li> <li>A second laptop</li> </ul> <p>For now, I would recommend installing Ubuntu.</p>"},{"location":"learn/laying-the-groundwork/#a-fresh-start","title":"A Fresh Start","text":"<p>Create a simple GitHub Repository and clone that to your machine. To make the repo hidden, you can add a dot before the repo name. For instance, use <code>.dotfiles</code> instead of <code>dotfiles</code>.</p>"},{"location":"learn/laying-the-groundwork/#installing-ansible","title":"Installing Ansible","text":"<p>It's pretty easy to install Ansible. For Ubuntu, all you need is to run the following command.</p> <pre><code>sudo apt update\nsudo apt install software-properties-common\nsudo add-apt-repository --yes --update ppa:ansible/ansible\nsudo apt install ansible\n</code></pre> <p>To verify that you have installed <code>ansible</code> successfully, use the following command.</p> <pre><code>ansible --version\n</code></pre> <p>But we have a tiny problem. What if you mess this the setup and you need to start fresh? Do you wish to install it manually again? I hope not.</p>"},{"location":"learn/laying-the-groundwork/#automate-the-ansible-installation","title":"Automate the Ansible Installation","text":"<p>I prefer to automate this as well. So, let's create a directory within our repo and call it <code>bin</code>. This is where we will keep all the bash scripts. Create a bash script file called <code>install.sh</code>.</p> <pre><code>\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 install.sh\n</code></pre> <p>We can simply put the installation command in this file, but let's make it slightly better. If you recall the first thing you did after a fresh installation of Ubuntu, you had to <code>update</code> and <code>upgrade</code> your system. So let's put that in the <code>install.sh</code> file as well.</p> <pre><code># Update and upgrade packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Ansible\nsudo apt install software-properties-common\nsudo add-apt-repository --yes --update ppa:ansible/ansible\nsudo apt install ansible\n</code></pre> <p>If you try to run this script, it will throw an error. We need to make it executable.</p> <pre><code># .dotfiles/bin\nsudo chmod +x install.sh\n</code></pre> <p>Now, we can easily execute it.</p> <pre><code># .dotfiles/bin\nsudo install.sh\n</code></pre>"},{"location":"learn/laying-the-groundwork/#the-directory-structure","title":"The Directory Structure","text":"<p>I recommend a simple directory structure to begin with.</p> <pre><code>.\n\u251c\u2500\u2500 ansible.cfg\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 install.sh\n\u251c\u2500\u2500 inventory.yml\n\u251c\u2500\u2500 playbook.yml\n\u251c\u2500\u2500 roles\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tool\n\u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 tasks\n\u2502\u00a0\u00a0  \u00a0\u00a0 \u2502   \u2514\u2500\u2500 main.yml\n\u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 files\n\u2502\u00a0\u00a0  \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 config_file_for_the_tool\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 templates\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 zshrc.j2\n\u2514\u2500\u2500 vars.yml\n</code></pre>"},{"location":"learn/laying-the-groundwork/#references","title":"References","text":"<ul> <li>Creating a new repository</li> <li>Ansible Documentation</li> <li>Installing Ansible on specific operating systems</li> <li>Sample Ansible setup</li> </ul>"},{"location":"learn/mapping-the-inventory/","title":"Mapping the Inventory","text":"<p>An Ansible inventory is a file that defines the hosts and groups of hosts that Ansible can manage and configure. It serves as a central location where you specify the target systems you want to automate tasks for, along with any variables or settings related to those hosts.</p> <p>By creating an inventory file, you can efficiently organize and manage the machines you need to work with, whether you're managing a single server or hundreds of systems.</p> <p>The inventory file can different extensions like <code>.yaml</code> or <code>.ini</code>. You can leverage <code>ansible-inventory</code> command to check the format of the file.</p> <pre><code>ansible-inventory -i inventory.yml --list\n</code></pre> <p>It is recommended to create an <code>ansible.cfg</code> file in the root directory of the project to avoid specifying the inventory file every time.</p> <pre><code># ansible.cfg\n\n[defaults]\ninventory = inventory.yaml\n</code></pre> <p>Now we can verify the inventory using <code>ansible-inventory --list</code>.</p> <p>Any host we mention in the inventory file will at least be a part of 2 groups, even if we don't explicitly create them: <code>all</code> and <code>ungrouped</code>. If we put a host in a group, then it will belong to that group along with the <code>all</code> group.</p> <p>For instance, consider the following sample.</p> <pre><code>all:\n  hosts:\n    localhost:\n      ansible_connection: local\n</code></pre> <p>If we print the graph of the inventory using <code>ansible-inventory --graph</code>, we get the following.</p> <pre><code>ansible-inventory -i inventory.yml --graph\n\n@all:\n  |--@ungrouped:\n  |  |--localhost\n</code></pre> <p>As we can see, it belongs to both, <code>ungrouped</code> as well as <code>all</code> groups.</p> <p>Of course, we can ping the host using ansible and that way we can verify if the host is accessible.</p> <pre><code>ansible localhost -m ping\n\nlocalhost | SUCCESS =&gt; {\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n</code></pre> <p>We can see the output which confirms that this host is reachable.</p> <p>So, for now we will create a simple <code>inventory.yml</code> file.</p> <pre><code>all:\n  hosts:\n    localhost:\n      ansible_connection: local\n</code></pre>"},{"location":"learn/mapping-the-inventory/#references","title":"References","text":"<ul> <li>Ansible - json schema</li> <li>Building an inventory</li> <li>How to build your inventory</li> </ul>"},{"location":"learn/the-config-whisperer/","title":"The Config Whisperer","text":"<p>When we run the <code>ansible-playbook</code> command to apply the changes, it first looks for the configuration file. Specifically, it looks for the file in the following order.</p> <ul> <li><code>ANSIBLE_CONFIG</code> - env variable (if set)</li> <li><code>ansible.cfg</code> - in current dir</li> <li><code>~/ansible.cfg</code> - in home dir</li> <li><code>/etc/ansible/ansible.cfg</code> - default</li> </ul> <p>For this project, I prefer the second option where we define the config file within the project. This way we can keep track of it using git. If there are multiple ansible config files in different projects, when executed, these won't clash with each other.</p> <p>This sounds great but we a small issue. Exactly what we can put in the config file? Well, for that you can run the following command to generate the config file with proper comments.</p> <pre><code>ansible-config init --disabled &gt; sample_ansible.cfg\n</code></pre> <p>As you can see it has a lot of configurable options. But we don't need to know all of those for now. The following is enough to start with.</p> <pre><code>[default]\ninventory = inventory.yml\ninterpreter_python = /usr/bin/python3\nroles_path = roles\n</code></pre> <ul> <li><code>inventory</code>: This will point to the inventory file we will create.</li> <li><code>interpreter_python</code>: Ansible need python to deploy the changes to the system. It's advisable to provide the correct path of Python interpreter.</li> <li><code>roles_path</code>: This directory will contain all the roles for the tools that we will deploy.</li> </ul>"},{"location":"learn/the-config-whisperer/#references","title":"References","text":"<ul> <li>Ansible Configuration Settings</li> </ul>"}]}